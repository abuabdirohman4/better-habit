---
description: "Better Habit project overview and technical specifications"
globs: ["**/*.tsx", "**/*.ts", "**/*.js", "**/*.jsx", "**/package.json", "**/next.config.*"]
alwaysApply: true
---

# Better Habit - Project Overview

## Project Description

Better Habit is a web application built with Next.js 14 for habit tracking and personal development. The app provides habit creation, tracking, progress monitoring, and user authentication with NextAuth integration.

## Tech Stack

- **Framework**: Next.js 14 (App Router)
- **Styling**: Tailwind CSS with DaisyUI components
- **Authentication**: NextAuth.js
- **Database**: Google Sheets API
- **State Management**: SWR for server state, React Hooks for local state
- **Caching**: SWR with built-in caching and revalidation
- **Icons**: FontAwesome + React Icons
- **Animations**: AOS (Animate On Scroll)
- **Build Tool**: Next.js built-in with TypeScript
- **Development**: ESLint, Prettier, PostCSS

## Project Structure

```
Better Habit/
├── app/                         # Next.js App Router pages
│   ├── api/                     # API routes
│   │   └── auth/                # NextAuth authentication
│   ├── globals.css              # Global styles with Tailwind
│   ├── layout.tsx               # Root layout with providers
│   └── page.tsx                 # Home page (Welcome screen)
├── components/                  # Reusable UI components
│   ├── Button/                  # Custom button component
│   ├── SessionProvider/         # NextAuth session provider
│   └── Spinner/                 # Loading spinner component
├── lib/                         # Utility libraries
│   ├── google-sheets.ts         # Google Sheets API client
│   └── swr-config.ts            # SWR configuration
├── utils/                       # Utility functions & helpers
│   ├── constants.ts             # App constants and keys
│   └── session.ts               # Session management utilities
├── public/                      # Static assets
│   └── illustration/            # SVG illustrations
└── .cursor/rules/               # Cursor IDE rules
```

## Key Features

### Core Features

- **Habit Creation**: Create and customize personal habits with goals and schedules
- **Progress Tracking**: Visual progress tracking with charts and statistics
- **User Authentication**: Secure login with NextAuth.js and multiple providers
- **Responsive Design**: Mobile-first design with Tailwind CSS and DaisyUI

### Advanced Features

- **Habit Analytics**: Detailed insights and progress reports
- **Streak Tracking**: Track consecutive days of habit completion
- **Reminder System**: Smart notifications and reminders
- **Social Features**: Share progress and compete with friends

### Technical Features

- **TypeScript**: Full type safety throughout the application
- **Google Sheets API**: Real-time data storage and retrieval
- **SWR Caching**: Intelligent caching with automatic revalidation
- **NextAuth.js**: Secure authentication with session management
- **AOS Animations**: Smooth scroll animations for better UX

## Customization Guide

### Required Replacements

1. **[PROJECT_NAME]** → Your project name
2. **[PROJECT_TYPE]** → Web app, Mobile app, Desktop app, etc.
3. **[MAIN_FRAMEWORK]** → Next.js, React, Vue, Angular, etc.
4. **[VERSION]** → Framework version
5. **[PROJECT_PURPOSE]** → What your app does
6. **[KEY_FEATURES]** → Main features of your app
7. **[INTEGRATION_TYPE]** → API, Database, External service, etc.

### Optional Customizations

- Update project structure to match your framework
- Add/remove features based on your needs
- Customize tech stack for your requirements
- Update file names and directories

### Example Customization

```markdown
# E-Commerce Store - Project Overview

## Project Description

E-Commerce Store is a web application built with Next.js 14 for online shopping. The app provides product catalog, shopping cart, checkout, and order management with Stripe payment integration.

## Tech Stack

- **Framework**: Next.js 14 (App Router)
- **Styling**: Tailwind CSS with custom design system
- **State Management**: Zustand for global state, React Hooks for local state
- **Data Integration**: PostgreSQL, Prisma ORM, Stripe API
```

## Template Variables

| Variable                  | Description         | Example                          |
| ------------------------- | ------------------- | -------------------------------- |
| `[PROJECT_NAME]`          | Your project name   | "E-Commerce Store"               |
| `[PROJECT_TYPE]`          | Type of application | "web application"                |
| `[MAIN_FRAMEWORK]`        | Primary framework   | "Next.js"                        |
| `[VERSION]`               | Framework version   | "14"                             |
| `[PROJECT_PURPOSE]`       | What the app does   | "online shopping"                |
| `[KEY_FEATURES]`          | Main features       | "product catalog, shopping cart" |
| `[INTEGRATION_TYPE]`      | Data integration    | "Stripe payment"                 |
| `[CSS_FRAMEWORK]`         | CSS framework       | "Tailwind CSS"                   |
| `[DESIGN_SYSTEM]`         | Design system       | "custom design system"           |
| `[STATE_MANAGEMENT]`      | State management    | "Zustand"                        |
| `[LOCAL_STATE]`           | Local state         | "React Hooks"                    |
| `[DATA_SOURCE]`           | Data source         | "PostgreSQL"                     |
| `[API_CLIENT]`            | API client          | "Prisma ORM"                     |
| `[BUILD_TOOL]`            | Build tool          | "Next.js built-in"               |
| `[OPTIMIZATION_FEATURES]` | Optimization        | "PWA optimization"               |
| `[LINTER]`                | Linter              | "ESLint"                         |
| `[FORMATTER]`             | Formatter           | "Prettier"                       |
| `[CSS_PROCESSOR]`         | CSS processor       | "PostCSS"                        |